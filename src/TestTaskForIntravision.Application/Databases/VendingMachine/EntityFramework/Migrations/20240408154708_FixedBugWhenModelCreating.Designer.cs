// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestTaskForIntravision.Application.Databases.VendingMachine.EntityFramework;

#nullable disable

namespace TestTaskForIntravision.Application.Databases.VendingMachine.EntityFramework.Migrations
{
    [DbContext(typeof(VendingMachineDbContext))]
    [Migration("20240408154708_FixedBugWhenModelCreating")]
    partial class FixedBugWhenModelCreating
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestTaskForIntravision.Domain.Entities.Beverage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_beverages");

                    b.HasIndex("Price")
                        .HasDatabaseName("ix_beverages_price");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_beverages_title");

                    b.ToTable("beverages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a54f7aa1-1eda-4bc0-8481-58e741fc9f86"),
                            Price = 120m,
                            Title = "Напиток энергетический ADRENALINE Rush Энергия газированный, 0.449л, Россия, 0.449 L"
                        },
                        new
                        {
                            Id = new Guid("ac2b9500-e6e6-4d29-9899-1d3f4304ee29"),
                            Price = 95m,
                            Title = "Напиток энергетический BURN сильногазированный, 0.449л, Россия, 0.449 L"
                        },
                        new
                        {
                            Id = new Guid("fca51e13-1875-46fd-9e25-4728f4f09962"),
                            Price = 80m,
                            Title = "Напиток ДОБРЫЙ Кола сильногазированный, 0.33л, Россия, 0.33 L"
                        },
                        new
                        {
                            Id = new Guid("fa681e9d-d304-4358-99e0-71244a6c0014"),
                            Price = 60m,
                            Title = "Напиток энергетический ФЛЭШ АП Energy Ягодный микс с кофеином и таурином газированный, 0.45л, Россия, 0.45 L"
                        },
                        new
                        {
                            Id = new Guid("ab973cc1-0313-4324-ad63-b7572004de8d"),
                            Price = 80m,
                            Title = "Напиток ДОБРЫЙ Кола без сахара сильногазированный, 0.33л, Россия, 0.33 L"
                        },
                        new
                        {
                            Id = new Guid("110cf5f8-9cfb-4bf4-98bb-c4d5e1bd286e"),
                            Price = 70m,
                            Title = "Вода минеральная BORJOMI природная газированная, 0.33л, Грузия, 0.33 L"
                        },
                        new
                        {
                            Id = new Guid("907dba77-8a18-4a69-9bc0-bb2a94b2c326"),
                            Price = 150m,
                            Title = "Напиток CHUPA CHUPS Клубничный крем газированный, 0.345л, Корея, 0.345 L"
                        },
                        new
                        {
                            Id = new Guid("2ae2f786-af31-4282-8796-0c6ab8540cec"),
                            Price = 45m,
                            Title = "Напиток COOL COLA сильногазированный, 0.33л, Россия, 0.33 L"
                        },
                        new
                        {
                            Id = new Guid("da310bc3-0e9e-4183-bb12-860675f22a75"),
                            Price = 80m,
                            Title = "Напиток ДОБРЫЙ Апельсин сильногазированный, 0.33л, Россия, 0.33 L"
                        },
                        new
                        {
                            Id = new Guid("c5a455eb-4445-4e11-ac9f-6f6520a529da"),
                            Price = 80m,
                            Title = "Напиток ДОБРЫЙ Лимон, лайм сильногазированный, 0.33л, Россия, 0.33 L"
                        },
                        new
                        {
                            Id = new Guid("f2a6ea68-a33f-4ee8-8fc8-0532ef49c308"),
                            Price = 84m,
                            Title = "Напиток сокосодержащий RICH Fleur из винограда с ароматом лаванды газированный, 0.33л"
                        },
                        new
                        {
                            Id = new Guid("d6c185da-e136-4e31-9d6c-440ce6d3ffa1"),
                            Price = 80m,
                            Title = "Напиток ДОБРЫЙ Манго, маракуйя сильногазированный, 0.33л"
                        },
                        new
                        {
                            Id = new Guid("87576b72-e4b6-4194-a5e5-75cc391f0c93"),
                            Price = 135m,
                            Title = "Напиток CHUPA CHUPS Апельсин газированный, 0.345л, Корея, 0.345 L"
                        },
                        new
                        {
                            Id = new Guid("dd42b6a4-fb4e-4022-a34f-6a07e94cab8a"),
                            Price = 55m,
                            Title = "Напиток ФРУСТАЙЛ Лимон, лайм газированный, 0.33л, Россия, 0.33 L"
                        });
                });

            modelBuilder.Entity("TestTaskForIntravision.Domain.Entities.BeverageImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BeverageId")
                        .HasColumnType("uuid")
                        .HasColumnName("beverage_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_beverage_images");

                    b.HasIndex("BeverageId")
                        .IsUnique()
                        .HasDatabaseName("ix_beverage_images_beverage_id");

                    b.ToTable("beverage_images", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("23f1955f-05ed-4836-91a0-fea1e31ab83d"),
                            BeverageId = new Guid("a54f7aa1-1eda-4bc0-8481-58e741fc9f86"),
                            Url = "https://lenta.servicecdn.ru/globalassets/1/-/50/14/39/249346_1.png?preset=fulllossywhite"
                        },
                        new
                        {
                            Id = new Guid("84129000-660a-4688-8320-87c34c44db63"),
                            BeverageId = new Guid("ac2b9500-e6e6-4d29-9899-1d3f4304ee29"),
                            Url = "https://lenta.servicecdn.ru/globalassets/1/-/53/41/25/251073_2.png?preset=fulllossywhite"
                        },
                        new
                        {
                            Id = new Guid("2e4d86ce-23c9-4c24-9245-92714841a99a"),
                            BeverageId = new Guid("fca51e13-1875-46fd-9e25-4728f4f09962"),
                            Url = "https://lenta.servicecdn.ru/globalassets/1/-/65/86/05/296384c1-bbb0-5ca5-8872-a3c5bdb00343_1.png?preset=fulllossywhite"
                        },
                        new
                        {
                            Id = new Guid("03fdfa86-05f2-4d1f-996d-188fae0b3829"),
                            BeverageId = new Guid("fa681e9d-d304-4358-99e0-71244a6c0014"),
                            Url = "https://lenta.servicecdn.ru/globalassets/1/-/50/86/69/13b74f22-2728-55ca-b284-ace48a86514c.png?preset=fulllossywhite"
                        },
                        new
                        {
                            Id = new Guid("9956f5d9-07ab-4e60-942a-34171000f557"),
                            BeverageId = new Guid("ab973cc1-0313-4324-ad63-b7572004de8d"),
                            Url = "https://lenta.servicecdn.ru/globalassets/1/-/65/86/09/7c8f2be3-1270-56ee-839a-1e05fcb9a75b_1.png?preset=fulllossywhite"
                        },
                        new
                        {
                            Id = new Guid("cc13a760-f11f-4e89-91a9-f44df584ee79"),
                            BeverageId = new Guid("110cf5f8-9cfb-4bf4-98bb-c4d5e1bd286e"),
                            Url = "https://lenta.servicecdn.ru/globalassets/1/-/44/93/94/283080_9.png?preset=fulllossywhite"
                        },
                        new
                        {
                            Id = new Guid("70361347-9d92-4e17-91fb-beb1c20cb1f3"),
                            BeverageId = new Guid("907dba77-8a18-4a69-9bc0-bb2a94b2c326"),
                            Url = "https://lenta.servicecdn.ru/globalassets/1/-/48/48/76/a9ccd5a6-200f-5306-9d93-b5225719e483_1.png?preset=fulllossywhite"
                        },
                        new
                        {
                            Id = new Guid("a7c0fe12-8e24-4f80-98a6-89d9b457847a"),
                            BeverageId = new Guid("2ae2f786-af31-4282-8796-0c6ab8540cec"),
                            Url = "https://lenta.servicecdn.ru/globalassets/1/-/65/90/48/442688.png?preset=fulllossywhite"
                        },
                        new
                        {
                            Id = new Guid("2e5c0935-5cff-4fa9-bea2-3b6218767236"),
                            BeverageId = new Guid("da310bc3-0e9e-4183-bb12-860675f22a75"),
                            Url = "https://lenta.servicecdn.ru/globalassets/1/-/65/86/06/18228960-e6b3-513d-b43b-f0df039eefc9_1.png?preset=fulllossywhite"
                        },
                        new
                        {
                            Id = new Guid("8f1d40d7-ce08-4c7f-b087-382dff6d2496"),
                            BeverageId = new Guid("c5a455eb-4445-4e11-ac9f-6f6520a529da"),
                            Url = "https://lenta.servicecdn.ru/globalassets/1/-/65/86/08/437715_1.png?preset=fulllossywhite"
                        },
                        new
                        {
                            Id = new Guid("fb91da02-864e-4f13-b61f-d3d69df11d52"),
                            BeverageId = new Guid("f2a6ea68-a33f-4ee8-8fc8-0532ef49c308"),
                            Url = "https://lenta.servicecdn.ru/globalassets/1/-/63/68/75/4d18e191-6454-57e8-89ec-9716286140d5.png?preset=fulllossywhite"
                        },
                        new
                        {
                            Id = new Guid("35dd0475-5acf-44d9-9d6c-e1591f89468c"),
                            BeverageId = new Guid("d6c185da-e136-4e31-9d6c-440ce6d3ffa1"),
                            Url = "https://lenta.servicecdn.ru/globalassets/1/-/65/86/07/437717_1.png?preset=fulllossywhite"
                        },
                        new
                        {
                            Id = new Guid("d82cabdf-f1ff-4336-b2f5-541b1afca315"),
                            BeverageId = new Guid("87576b72-e4b6-4194-a5e5-75cc391f0c93"),
                            Url = "https://lenta.servicecdn.ru/globalassets/1/-/50/79/72/188132.png?preset=fulllossywhite"
                        },
                        new
                        {
                            Id = new Guid("2b91ef26-1232-4fb0-aab9-e373ac5a93d1"),
                            BeverageId = new Guid("dd42b6a4-fb4e-4022-a34f-6a07e94cab8a"),
                            Url = "https://lenta.servicecdn.ru/globalassets/1/-/67/99/68/479519.png?preset=fulllossywhite"
                        });
                });

            modelBuilder.Entity("TestTaskForIntravision.Domain.Entities.Coin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_coins");

                    b.HasIndex("Value")
                        .HasDatabaseName("ix_coins_value");

                    b.ToTable("coins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d32859c5-e579-47ed-bea9-afcf252ed0fd"),
                            Value = 1m
                        },
                        new
                        {
                            Id = new Guid("82e050b3-dce3-4d56-a95c-b62911867fe2"),
                            Value = 2m
                        },
                        new
                        {
                            Id = new Guid("406ee996-3552-4bfb-9d3a-b149d99b2a47"),
                            Value = 5m
                        },
                        new
                        {
                            Id = new Guid("238bcf95-3380-4dde-b878-f3de87e11cd6"),
                            Value = 10m
                        });
                });

            modelBuilder.Entity("TestTaskForIntravision.Domain.Entities.StorageBeverage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BeverageId")
                        .HasColumnType("uuid")
                        .HasColumnName("beverage_id");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.HasKey("Id")
                        .HasName("pk_storage_beverages");

                    b.HasIndex("BeverageId")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_beverages_beverage_id");

                    b.HasIndex("Count")
                        .HasDatabaseName("ix_storage_beverages_count");

                    b.ToTable("storage_beverages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fcf0bd6-b7e7-4654-86d9-e6d6dfd7a575"),
                            BeverageId = new Guid("a54f7aa1-1eda-4bc0-8481-58e741fc9f86"),
                            Count = 5L
                        },
                        new
                        {
                            Id = new Guid("a730bd9b-fb99-42db-96d3-58edaa93851d"),
                            BeverageId = new Guid("ac2b9500-e6e6-4d29-9899-1d3f4304ee29"),
                            Count = 4L
                        },
                        new
                        {
                            Id = new Guid("421cfe57-f499-4ad8-a55d-51d394cd10aa"),
                            BeverageId = new Guid("fca51e13-1875-46fd-9e25-4728f4f09962"),
                            Count = 3L
                        },
                        new
                        {
                            Id = new Guid("daa4b771-a079-45cd-b859-6d5bbf171502"),
                            BeverageId = new Guid("fa681e9d-d304-4358-99e0-71244a6c0014"),
                            Count = 2L
                        },
                        new
                        {
                            Id = new Guid("ffa5821e-edaa-498f-a132-d36fa7fd9937"),
                            BeverageId = new Guid("ab973cc1-0313-4324-ad63-b7572004de8d"),
                            Count = 1L
                        },
                        new
                        {
                            Id = new Guid("3c6670e4-6a50-4b42-8e0c-8aac1429db11"),
                            BeverageId = new Guid("110cf5f8-9cfb-4bf4-98bb-c4d5e1bd286e"),
                            Count = 0L
                        },
                        new
                        {
                            Id = new Guid("55c16d07-bff2-4fdc-a125-866eb4d56916"),
                            BeverageId = new Guid("907dba77-8a18-4a69-9bc0-bb2a94b2c326"),
                            Count = 1L
                        },
                        new
                        {
                            Id = new Guid("16a32ef0-b43d-4371-a41c-ab3e29d0688c"),
                            BeverageId = new Guid("2ae2f786-af31-4282-8796-0c6ab8540cec"),
                            Count = 2L
                        },
                        new
                        {
                            Id = new Guid("9a60210e-297b-460b-b88b-e04763612694"),
                            BeverageId = new Guid("da310bc3-0e9e-4183-bb12-860675f22a75"),
                            Count = 3L
                        },
                        new
                        {
                            Id = new Guid("b5c2073f-303c-4779-9812-34e1476d3351"),
                            BeverageId = new Guid("c5a455eb-4445-4e11-ac9f-6f6520a529da"),
                            Count = 4L
                        },
                        new
                        {
                            Id = new Guid("e1a5e1ea-6e6a-4a8b-bf54-0a5a5189b8a2"),
                            BeverageId = new Guid("f2a6ea68-a33f-4ee8-8fc8-0532ef49c308"),
                            Count = 5L
                        },
                        new
                        {
                            Id = new Guid("fe47162d-e857-4a1a-b6ae-250f9f42a15e"),
                            BeverageId = new Guid("d6c185da-e136-4e31-9d6c-440ce6d3ffa1"),
                            Count = 4L
                        },
                        new
                        {
                            Id = new Guid("3fb2d4a5-7cc3-4d50-a800-282b8aaedf3a"),
                            BeverageId = new Guid("87576b72-e4b6-4194-a5e5-75cc391f0c93"),
                            Count = 3L
                        },
                        new
                        {
                            Id = new Guid("462094fa-e637-4434-a750-ac8c74b12004"),
                            BeverageId = new Guid("dd42b6a4-fb4e-4022-a34f-6a07e94cab8a"),
                            Count = 2L
                        });
                });

            modelBuilder.Entity("TestTaskForIntravision.Domain.Entities.StorageCoin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CoinId")
                        .HasColumnType("uuid")
                        .HasColumnName("coin_id");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<bool>("IsBlockedForDeposit")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blocked_for_deposit");

                    b.HasKey("Id")
                        .HasName("pk_storage_coins");

                    b.HasIndex("CoinId")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_coins_coin_id");

                    b.HasIndex("Count")
                        .HasDatabaseName("ix_storage_coins_count");

                    b.ToTable("storage_coins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef503d11-c3f6-4275-919a-204d21dc565e"),
                            CoinId = new Guid("d32859c5-e579-47ed-bea9-afcf252ed0fd"),
                            Count = 100L,
                            IsBlockedForDeposit = false
                        },
                        new
                        {
                            Id = new Guid("e876e3c9-fa62-4889-9491-6a21484195cc"),
                            CoinId = new Guid("82e050b3-dce3-4d56-a95c-b62911867fe2"),
                            Count = 75L,
                            IsBlockedForDeposit = false
                        },
                        new
                        {
                            Id = new Guid("5da7221e-efaf-45dc-9ab8-8de83bee6e7e"),
                            CoinId = new Guid("406ee996-3552-4bfb-9d3a-b149d99b2a47"),
                            Count = 50L,
                            IsBlockedForDeposit = true
                        },
                        new
                        {
                            Id = new Guid("1afff46c-eb57-46a3-80ef-62988a93aba1"),
                            CoinId = new Guid("238bcf95-3380-4dde-b878-f3de87e11cd6"),
                            Count = 25L,
                            IsBlockedForDeposit = false
                        });
                });

            modelBuilder.Entity("TestTaskForIntravision.Domain.Entities.BeverageImage", b =>
                {
                    b.HasOne("TestTaskForIntravision.Domain.Entities.Beverage", "Beverage")
                        .WithOne("Image")
                        .HasForeignKey("TestTaskForIntravision.Domain.Entities.BeverageImage", "BeverageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_beverage_images_beverages_beverage_id");

                    b.Navigation("Beverage");
                });

            modelBuilder.Entity("TestTaskForIntravision.Domain.Entities.StorageBeverage", b =>
                {
                    b.HasOne("TestTaskForIntravision.Domain.Entities.Beverage", "Beverage")
                        .WithOne("Storage")
                        .HasForeignKey("TestTaskForIntravision.Domain.Entities.StorageBeverage", "BeverageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_storage_beverages_beverages_beverage_id");

                    b.Navigation("Beverage");
                });

            modelBuilder.Entity("TestTaskForIntravision.Domain.Entities.StorageCoin", b =>
                {
                    b.HasOne("TestTaskForIntravision.Domain.Entities.Coin", "Coin")
                        .WithOne("Storage")
                        .HasForeignKey("TestTaskForIntravision.Domain.Entities.StorageCoin", "CoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_storage_coins_coins_coin_id");

                    b.Navigation("Coin");
                });

            modelBuilder.Entity("TestTaskForIntravision.Domain.Entities.Beverage", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("TestTaskForIntravision.Domain.Entities.Coin", b =>
                {
                    b.Navigation("Storage");
                });
#pragma warning restore 612, 618
        }
    }
}
